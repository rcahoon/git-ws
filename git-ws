#!/bin/bash

if [ "x$1" = "x-f" ]; then
  dest_name="$2"
  new_ws=true
  source_name="$3"
elif [ "x$1" = "x-k" ]; then
  keep_uncommitted=true
  dest_name="$2"
elif [ "x$1" = "x-d" ]; then
  git branch -d "$2"
  exit
else
  dest_name="$1"
fi

if [ -z "$dest_name" ]; then
#  echo "Please specify a target branch name" >&2
  git branch
  git status
  exit 1
fi

branch_name="$(git symbolic-ref HEAD 2>/dev/null)"
branch_name="${branch_name##refs/heads/}"

if [ -z "$keep_uncommitted" ]; then
  if [ -z "$branch_name" ]; then
    echo "Currently on an unnamed branch - cannot save state" >&2
    exit 1
  fi

  if ! git diff-index --cached --quiet HEAD; then
    git commit --quiet --no-verify --message="~~AUTO~~ staged changes on $branch_name" \
      || (echo "Error saving staged changes"; exit 1)
  fi
  git add -A || exit 1
  if ! git diff-index --cached --quiet HEAD; then
    git commit --quiet --no-verify --message="~~AUTO~~ unstaged changes on $branch_name" \
      || (echo "Error saving unstaged changes"; exit 1)
  fi
fi

if [ "$new_ws" = true ]; then
  if [ -z "$source_name" ]; then
    source_name="origin/HEAD"
  fi
  git checkout -b "$dest_name" --track "$source_name"
  checkout_result=$?
else
  git checkout --quiet --progress "$dest_name" \
    && echo "Switched to branch '$dest_name'"
  checkout_result=$?
fi

unstaged=true
git rev-list --format=oneline HEAD | while read line; do
  if [[ "$unstaged" = true && "$line" = *"~~AUTO~~ unstaged changes"* ]]; then
    git reset --mixed --quiet HEAD^ || break
    continue
  fi
  unstaged=false
  if [[ "$line" = *"~~AUTO~~ staged changes"* ]]; then
    git reset --soft --quiet HEAD^ || break
    continue
  fi
  break
done

git stash list | while read line; do
  regex="^([^:]+).*~~AUTO~~ on $dest_name$"
  if [[ "$line" =~ $regex ]]; then
    stash_id="${BASH_REMATCH[1]}"
    git stash pop --quiet "$stash_id" || (echo "Error unstashing saved changes")
    break
  fi
done

if [ $checkout_result -eq 0 ]; then
  git status
fi
