#!/usr/bin/env python3

import argparse
import subprocess
import sys

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--force", action="store_true")
parser.add_argument("-k", "--keep", action="store_true")
parser.add_argument("-d", "--delete", action="store_true")
parser.add_argument("-s", "--save", action="store_true")
parser.add_argument("branch_name", nargs="?")
parser.add_argument("base_branch", nargs="?", default="origin/HEAD")
args = parser.parse_args()

if args.delete:
    sys.exit(subprocess.call(["git", "branch", "-d", args.branch_name]))

if not args.save and not args.branch_name:
    # print("Please specify a target branch name", file=sys.stderr)
    subprocess.call(["git", "branch"])
    subprocess.call(["git", "status"])
    sys.exit(1)

if args.save or (
    not args.keep and subprocess.check_output(["git", "status", "--porcelain"])
):
    try:
        current_branch_name = subprocess.check_output(
            ["git", "symbolic-ref", "HEAD"], universal_newlines=True
        )
    except subprocess.CalledProcessError:
        print(
            "Currently on an unnamed branch - cannot save state",
            file=sys.stderr,
        )
        sys.exit(1)
    current_branch_name = current_branch_name.split("refs/heads/", 1)[-1]

    print("Saving branch working state", file=sys.stderr)

    if subprocess.call(["git", "diff", "--cached", "--quiet", "HEAD"]) != 0:
        if (
            subprocess.call(
                [
                    "git",
                    "commit",
                    "--quiet",
                    "--no-verify",
                    f"--message=~~AUTO~~ staged changes on {current_branch_name}",
                ]
            )
            != 0
        ):
            print("Error saving staged changes", file=sys.stderr)
            sys.exit(1)
    subprocess.check_call(["git", "add", "-A"])
    if subprocess.call(["git", "diff", "--cached", "--quiet", "HEAD"]) != 0:
        if (
            subprocess.call(
                [
                    "git",
                    "commit",
                    "--quiet",
                    "--no-verify",
                    f"--message=~~AUTO~~ unstaged changes on {current_branch_name}",
                ]
            )
            != 0
        ):
            print("Error saving unstaged changes", file=sys.stderr)
            sys.exit(1)

    if args.save:
        sys.exit(0)

if args.force:
    checkout_result = subprocess.call(
        ["git", "checkout", "-b", args.branch_name, "--track", args.base_branch]
    )
else:
    checkout_result = subprocess.call(
        ["git", "checkout", "--quiet", "--progress", args.branch_name]
    )
    if checkout_result == 0:
        print(f"Switched to branch {args.branch_name}", file=sys.stderr)

unstaged = True
for line in subprocess.check_output(
    ["git", "rev-list", "--max-count=100", "--format=oneline", "HEAD"],
    universal_newlines=True,
).splitlines():
    if unstaged and "~~AUTO~~ unstaged changes" in line:
        print("Restoring branch working state", file=sys.stderr)
        if (
            subprocess.call(["git", "reset", "--mixed", "--quiet", "HEAD^"])
            != 0
        ):
            break
        continue
    unstaged = False
    if "~~AUTO~~ staged changes" in line:
        print("Restoring branch working state", file=sys.stderr)
        if subprocess.call(["git", "reset", "--soft", "--quiet", "HEAD^"]) != 0:
            break
        continue
    break

if checkout_result == 0:
    subprocess.check_call(["git", "status"])

sys.exit(checkout_result)
